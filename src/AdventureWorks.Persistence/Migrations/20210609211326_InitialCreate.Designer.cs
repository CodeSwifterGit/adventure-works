// <auto-generated />
using System;
using AdventureWorks.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AdventureWorks.Persistence.Migrations
{
    [DbContext(typeof(AdventureWorksContext))]
    [Migration("20210609211326_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Dbo.AWBuildVersion", b =>
                {
                    b.Property<byte>("SystemInformationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DatabaseVersion")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasColumnName("Database Version");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("VersionDate")
                        .HasColumnType("datetime");

                    b.HasKey("SystemInformationID");

                    b.ToTable("AWBuildVersion", "dbo");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Dbo.DatabaseLog", b =>
                {
                    b.Property<int>("DatabaseLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DatabaseUser")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Object")
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Schema")
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Tsql")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("TSQL");

                    b.Property<string>("XmlEvent")
                        .HasColumnType("xml");

                    b.HasKey("DatabaseLogID");

                    b.ToTable("DatabaseLog", "dbo");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Dbo.ErrorLog", b =>
                {
                    b.Property<int>("ErrorLogID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ErrorLine")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("ErrorNumber")
                        .HasColumnType("int");

                    b.Property<string>("ErrorProcedure")
                        .HasColumnType("nvarchar(126)");

                    b.Property<int?>("ErrorSeverity")
                        .HasColumnType("int");

                    b.Property<int?>("ErrorState")
                        .HasColumnType("int");

                    b.Property<DateTime>("ErrorTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("ErrorLogID");

                    b.ToTable("ErrorLog", "dbo");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.HumanResources.Department", b =>
                {
                    b.Property<short>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DepartmentID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_Department_Name");

                    b.ToTable("Department", "HumanResources");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.HumanResources.Employee", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<bool>("CurrentFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("EmployeeID1")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nchar(1)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LoginID")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("ManagerID")
                        .HasColumnType("int");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasColumnType("nchar(1)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("NationalIDNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("SalariedFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<short>("SickLeaveHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<short>("VacationHours")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("EmployeeID");

                    b.HasIndex("ContactID")
                        .HasDatabaseName("FK_Employee_Contact_Contact");

                    b.HasIndex("EmployeeID1");

                    b.HasIndex("LoginID")
                        .IsUnique()
                        .HasDatabaseName("AK_Employee_LoginID");

                    b.HasIndex("ManagerID")
                        .HasDatabaseName("FK_Employee_Manager_Employee");

                    b.HasIndex("NationalIDNumber")
                        .IsUnique()
                        .HasDatabaseName("AK_Employee_NationalIDNumber");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_Employee_rowguid");

                    b.ToTable("Employee", "HumanResources");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.HumanResources.EmployeeAddress", b =>
                {
                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("EmployeeID", "AddressID");

                    b.HasIndex("AddressID")
                        .HasDatabaseName("FK_EmployeeAddress_Address_Address");

                    b.HasIndex("EmployeeID")
                        .HasDatabaseName("FK_EmployeeAddress_Employee_Employee");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_EmployeeAddress_rowguid");

                    b.ToTable("EmployeeAddress", "HumanResources");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.HumanResources.EmployeeDepartmentHistory", b =>
                {
                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<short>("DepartmentID")
                        .HasColumnType("smallint");

                    b.Property<byte>("ShiftID")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("EmployeeID", "DepartmentID", "ShiftID", "StartDate");

                    b.HasIndex("DepartmentID")
                        .HasDatabaseName("FK_EmployeeDepartmentHistory_Department_Department");

                    b.HasIndex("EmployeeID")
                        .HasDatabaseName("FK_EmployeeDepartmentHistory_Employee_Employee");

                    b.HasIndex("ShiftID")
                        .HasDatabaseName("FK_EmployeeDepartmentHistory_Shift_Shift");

                    b.ToTable("EmployeeDepartmentHistory", "HumanResources");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.HumanResources.EmployeePayHistory", b =>
                {
                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RateChangeDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("PayFrequency")
                        .HasColumnType("tinyint");

                    b.Property<decimal>("Rate")
                        .HasColumnType("money");

                    b.HasKey("EmployeeID", "RateChangeDate");

                    b.HasIndex("EmployeeID")
                        .HasDatabaseName("FK_EmployeePayHistory_Employee_Employee");

                    b.ToTable("EmployeePayHistory", "HumanResources");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.HumanResources.JobCandidate", b =>
                {
                    b.Property<int>("JobCandidateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeID1")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Resume")
                        .HasColumnType("xml");

                    b.HasKey("JobCandidateID");

                    b.HasIndex("EmployeeID")
                        .HasDatabaseName("FK_JobCandidate_Employee_Employee");

                    b.HasIndex("EmployeeID1");

                    b.ToTable("JobCandidate", "HumanResources");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.HumanResources.Shift", b =>
                {
                    b.Property<byte>("ShiftID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.HasKey("ShiftID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_Shift_Name");

                    b.HasIndex("EndTime", "StartTime")
                        .IsUnique()
                        .HasDatabaseName("AK_Shift_StartTime_EndTime");

                    b.ToTable("Shift", "HumanResources");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Person.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("StateProvinceID")
                        .HasColumnType("int");

                    b.HasKey("AddressID");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_Address_rowguid");

                    b.HasIndex("StateProvinceID")
                        .HasDatabaseName("FK_Address_StateProvince_StateProvince");

                    b.HasIndex("AddressLine1", "AddressLine2", "City", "PostalCode", "StateProvinceID")
                        .IsUnique()
                        .HasDatabaseName("IX_Address_AddressLine1_AddressLine2_City_StateProvinceID_PostalCode")
                        .HasFilter("[AddressLine2] IS NOT NULL");

                    b.ToTable("Address", "Person");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Person.AddressType", b =>
                {
                    b.Property<int>("AddressTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("AddressTypeID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_AddressType_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_AddressType_rowguid");

                    b.ToTable("AddressType", "Person");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Person.Contact", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalContactInfo")
                        .HasColumnType("xml");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EmailPromotion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("NameStyle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(8000)");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Suffix")
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Title")
                        .HasMaxLength(8000)
                        .HasColumnType("varchar(8000)");

                    b.HasKey("ContactID");

                    b.HasIndex("EmailAddress")
                        .HasDatabaseName("IX_Contact_EmailAddress");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_Contact_rowguid");

                    b.ToTable("Contact", "Person");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Person.ContactType", b =>
                {
                    b.Property<int>("ContactTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ContactTypeID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_ContactType_Name");

                    b.ToTable("ContactType", "Person");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Person.CountryRegion", b =>
                {
                    b.Property<string>("CountryRegionCode")
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CountryRegionCode");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_CountryRegion_Name");

                    b.ToTable("CountryRegion", "Person");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Person.StateProvince", b =>
                {
                    b.Property<int>("StateProvinceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryRegionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)");

                    b.Property<bool>("IsOnlyStateProvinceFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("StateProvinceCode")
                        .IsRequired()
                        .HasColumnType("nchar(3)");

                    b.Property<int>("TerritoryID")
                        .HasColumnType("int");

                    b.HasKey("StateProvinceID");

                    b.HasIndex("CountryRegionCode")
                        .HasDatabaseName("FK_StateProvince_CountryRegion_CountryRegion");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_StateProvince_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_StateProvince_rowguid");

                    b.HasIndex("TerritoryID")
                        .HasDatabaseName("FK_StateProvince_SalesTerritory_SalesTerritory");

                    b.HasIndex("CountryRegionCode", "StateProvinceCode")
                        .IsUnique()
                        .HasDatabaseName("AK_StateProvince_StateProvinceCode_CountryRegionCode");

                    b.ToTable("StateProvince", "Person");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.BillOfMaterials", b =>
                {
                    b.Property<int>("BillOfMaterialsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("BOMLevel")
                        .HasColumnType("smallint");

                    b.Property<int>("ComponentID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("PerAssemblyQty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(8,2)")
                        .HasDefaultValueSql("((1.00))");

                    b.Property<int?>("ProductAssemblyID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UnitMeasureCode")
                        .IsRequired()
                        .HasColumnType("nchar(3)");

                    b.HasKey("BillOfMaterialsID");

                    b.HasIndex("ComponentID")
                        .HasDatabaseName("FK_BillOfMaterials_ComponentProduct_Product");

                    b.HasIndex("ProductAssemblyID")
                        .HasDatabaseName("FK_BillOfMaterials_AssemblyProduct_Product");

                    b.HasIndex("ProductID");

                    b.HasIndex("UnitMeasureCode")
                        .HasDatabaseName("FK_BillOfMaterials_UnitMeasure_UnitMeasure");

                    b.HasIndex("ComponentID", "ProductAssemblyID", "StartDate")
                        .IsUnique()
                        .HasDatabaseName("AK_BillOfMaterials_ProductAssemblyID_ComponentID_StartDate")
                        .HasFilter("[ProductAssemblyID] IS NOT NULL");

                    b.ToTable("BillOfMaterials", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.Culture", b =>
                {
                    b.Property<string>("CultureID")
                        .HasColumnType("nchar(6)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CultureID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_Culture_Name");

                    b.ToTable("Culture", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.Document", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChangeNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<byte[]>("Document")
                        .HasMaxLength(8000)
                        .HasColumnType("varbinary(8000)");

                    b.Property<string>("DocumentSummary")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Revision")
                        .IsRequired()
                        .HasColumnType("nchar(5)");

                    b.Property<byte>("Status")
                        .HasColumnType("tinyint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DocumentID");

                    b.HasIndex("FileName", "Revision")
                        .IsUnique()
                        .HasDatabaseName("AK_Document_FileName_Revision");

                    b.ToTable("Document", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.Illustration", b =>
                {
                    b.Property<int>("IllustrationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Diagram")
                        .HasColumnType("xml");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IllustrationID");

                    b.ToTable("Illustration", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.Location", b =>
                {
                    b.Property<short>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Availability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(8,2)")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("CostRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallmoney")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LocationID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_Location_Name");

                    b.ToTable("Location", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Class")
                        .HasColumnType("nchar(2)");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("DaysToManufacture")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DiscontinuedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("FinishedGoodsFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("money");

                    b.Property<bool>("MakeFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductLine")
                        .HasColumnType("nchar(2)");

                    b.Property<int?>("ProductModelID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductModelID1")
                        .HasColumnType("int");

                    b.Property<string>("ProductNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("ProductSubcategoryID")
                        .HasColumnType("int");

                    b.Property<int?>("ProductSubcategoryID1")
                        .HasColumnType("int");

                    b.Property<short>("ReorderPoint")
                        .HasColumnType("smallint");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<short>("SafetyStockLevel")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("SellEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("SellStartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Size")
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("SizeUnitMeasureCode")
                        .HasColumnType("nchar(3)");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("money");

                    b.Property<string>("Style")
                        .HasColumnType("nchar(2)");

                    b.Property<string>("UnitMeasureCode")
                        .HasColumnType("nchar(3)");

                    b.Property<string>("UnitMeasureCode1")
                        .HasColumnType("nchar(3)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(8,2)");

                    b.Property<string>("WeightUnitMeasureCode")
                        .HasColumnType("nchar(3)");

                    b.HasKey("ProductID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_Product_Name");

                    b.HasIndex("ProductModelID")
                        .HasDatabaseName("FK_Product_ProductModel_ProductModel");

                    b.HasIndex("ProductModelID1");

                    b.HasIndex("ProductNumber")
                        .IsUnique()
                        .HasDatabaseName("AK_Product_ProductNumber");

                    b.HasIndex("ProductSubcategoryID")
                        .HasDatabaseName("FK_Product_ProductSubcategory_ProductSubcategory");

                    b.HasIndex("ProductSubcategoryID1");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_Product_rowguid");

                    b.HasIndex("SizeUnitMeasureCode")
                        .HasDatabaseName("FK_Product_UnitMeasureSize_UnitMeasure");

                    b.HasIndex("UnitMeasureCode");

                    b.HasIndex("UnitMeasureCode1");

                    b.HasIndex("WeightUnitMeasureCode")
                        .HasDatabaseName("FK_Product_UnitMeasureWeight_UnitMeasure");

                    b.ToTable("Product", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductCategoryID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_ProductCategory_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_ProductCategory_rowguid");

                    b.ToTable("ProductCategory", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductCostHistory", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("StandardCost")
                        .HasColumnType("money");

                    b.HasKey("ProductID", "StartDate");

                    b.HasIndex("ProductID")
                        .HasDatabaseName("FK_ProductCostHistory_Product_Product");

                    b.ToTable("ProductCostHistory", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductDescription", b =>
                {
                    b.Property<int>("ProductDescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(400)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductDescriptionID");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_ProductDescription_rowguid");

                    b.ToTable("ProductDescription", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductDocument", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("DocumentID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProductID", "DocumentID");

                    b.HasIndex("DocumentID")
                        .HasDatabaseName("FK_ProductDocument_Document_Document");

                    b.HasIndex("ProductID")
                        .HasDatabaseName("FK_ProductDocument_Product_Product");

                    b.ToTable("ProductDocument", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductInventory", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<short>("LocationID")
                        .HasColumnType("smallint");

                    b.Property<byte>("Bin")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Shelf")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("ProductID", "LocationID");

                    b.HasIndex("LocationID")
                        .HasDatabaseName("FK_ProductInventory_Location_Location");

                    b.HasIndex("ProductID")
                        .HasDatabaseName("FK_ProductInventory_Product_Product");

                    b.ToTable("ProductInventory", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductListPriceHistory", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("ListPrice")
                        .HasColumnType("money");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProductID", "StartDate");

                    b.HasIndex("ProductID")
                        .HasDatabaseName("FK_ProductListPriceHistory_Product_Product");

                    b.ToTable("ProductListPriceHistory", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductModel", b =>
                {
                    b.Property<int>("ProductModelID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CatalogDescription")
                        .HasColumnType("xml");

                    b.Property<string>("Instructions")
                        .HasColumnType("xml");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductModelID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_ProductModel_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_ProductModel_rowguid");

                    b.ToTable("ProductModel", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductModelIllustration", b =>
                {
                    b.Property<int>("ProductModelID")
                        .HasColumnType("int");

                    b.Property<int>("IllustrationID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProductModelID", "IllustrationID");

                    b.HasIndex("IllustrationID")
                        .HasDatabaseName("FK_ProductModelIllustration_Illustration_Illustration");

                    b.HasIndex("ProductModelID")
                        .HasDatabaseName("FK_ProductModelIllustration_ProductModel_ProductModel");

                    b.ToTable("ProductModelIllustration", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductModelProductDescriptionCulture", b =>
                {
                    b.Property<int>("ProductModelID")
                        .HasColumnType("int");

                    b.Property<int>("ProductDescriptionID")
                        .HasColumnType("int");

                    b.Property<string>("CultureID")
                        .HasColumnType("nchar(6)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ProductModelID", "ProductDescriptionID", "CultureID");

                    b.HasIndex("CultureID")
                        .HasDatabaseName("FK_ProductModelProductDescriptionCulture_Culture_Culture");

                    b.HasIndex("ProductDescriptionID")
                        .HasDatabaseName("FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescription");

                    b.HasIndex("ProductModelID")
                        .HasDatabaseName("FK_ProductModelProductDescriptionCulture_ProductModel_ProductModel");

                    b.ToTable("ProductModelProductDescriptionCulture", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductPhoto", b =>
                {
                    b.Property<int>("ProductPhotoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("LargePhoto")
                        .HasMaxLength(8000)
                        .HasColumnType("varbinary(8000)");

                    b.Property<string>("LargePhotoFileName")
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte[]>("ThumbNailPhoto")
                        .HasMaxLength(8000)
                        .HasColumnType("varbinary(8000)");

                    b.Property<string>("ThumbnailPhotoFileName")
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductPhotoID");

                    b.ToTable("ProductPhoto", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductProductPhoto", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("ProductPhotoID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Primary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.HasKey("ProductID", "ProductPhotoID");

                    b.HasIndex("ProductID")
                        .HasDatabaseName("FK_ProductProductPhoto_Product_Product");

                    b.HasIndex("ProductPhotoID")
                        .HasDatabaseName("FK_ProductProductPhoto_ProductPhoto_ProductPhoto");

                    b.ToTable("ProductProductPhoto", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductReview", b =>
                {
                    b.Property<int>("ProductReviewID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(3850)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ReviewerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductReviewID");

                    b.HasIndex("ProductID")
                        .HasDatabaseName("FK_ProductReview_Product_Product");

                    b.HasIndex("ProductID", "ReviewerName")
                        .HasDatabaseName("IX_ProductReview_ProductID_Name")
                        .HasAnnotation("SqlServer:Include", new[] { "Comments" });

                    b.ToTable("ProductReview", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductSubcategory", b =>
                {
                    b.Property<int>("ProductSubcategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductCategoryID")
                        .HasColumnType("int");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("ProductSubcategoryID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_ProductSubcategory_Name");

                    b.HasIndex("ProductCategoryID")
                        .HasDatabaseName("FK_ProductSubcategory_ProductCategory_ProductCategory");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_ProductSubcategory_rowguid");

                    b.ToTable("ProductSubcategory", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ScrapReason", b =>
                {
                    b.Property<short>("ScrapReasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ScrapReasonID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_ScrapReason_Name");

                    b.ToTable("ScrapReason", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.TransactionHistory", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 100000)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ActualCost")
                        .HasColumnType("money");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceOrderID")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceOrderLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nchar(1)");

                    b.HasKey("TransactionID");

                    b.HasIndex("ProductID")
                        .HasDatabaseName("FK_TransactionHistory_Product_Product");

                    b.HasIndex("ReferenceOrderID", "ReferenceOrderLineID")
                        .HasDatabaseName("IX_TransactionHistory_ReferenceOrderID_ReferenceOrderLineID");

                    b.ToTable("TransactionHistory", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.TransactionHistoryArchive", b =>
                {
                    b.Property<int>("TransactionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("ActualCost")
                        .HasColumnType("money");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceOrderID")
                        .HasColumnType("int");

                    b.Property<int>("ReferenceOrderLineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("TransactionDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasColumnType("nchar(1)");

                    b.HasKey("TransactionID");

                    b.HasIndex("ProductID")
                        .HasDatabaseName("IX_TransactionHistoryArchive_ProductID");

                    b.HasIndex("ReferenceOrderID", "ReferenceOrderLineID")
                        .HasDatabaseName("IX_TransactionHistoryArchive_ReferenceOrderID_ReferenceOrderLineID");

                    b.ToTable("TransactionHistoryArchive", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.UnitMeasure", b =>
                {
                    b.Property<string>("UnitMeasureCode")
                        .HasColumnType("nchar(3)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UnitMeasureCode");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_UnitMeasure_Name");

                    b.ToTable("UnitMeasure", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.WorkOrder", b =>
                {
                    b.Property<int>("WorkOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("OrderQty")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<short?>("ScrapReasonID")
                        .HasColumnType("smallint");

                    b.Property<short?>("ScrapReasonID1")
                        .HasColumnType("smallint");

                    b.Property<short>("ScrappedQty")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StockedQty")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("(isnull([OrderQty]-[ScrappedQty],(0)))", false);

                    b.HasKey("WorkOrderID");

                    b.HasIndex("ProductID")
                        .HasDatabaseName("FK_WorkOrder_Product_Product");

                    b.HasIndex("ScrapReasonID")
                        .HasDatabaseName("FK_WorkOrder_ScrapReason_ScrapReason");

                    b.HasIndex("ScrapReasonID1");

                    b.ToTable("WorkOrder", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.WorkOrderRouting", b =>
                {
                    b.Property<int>("WorkOrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<short>("OperationSequence")
                        .HasColumnType("smallint");

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("money");

                    b.Property<DateTime?>("ActualEndDate")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("ActualResourceHrs")
                        .HasColumnType("decimal(9,4)");

                    b.Property<DateTime?>("ActualStartDate")
                        .HasColumnType("datetime");

                    b.Property<short>("LocationID")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<decimal>("PlannedCost")
                        .HasColumnType("money");

                    b.Property<DateTime>("ScheduledEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ScheduledStartDate")
                        .HasColumnType("datetime");

                    b.HasKey("WorkOrderID", "ProductID", "OperationSequence");

                    b.HasIndex("LocationID")
                        .HasDatabaseName("FK_WorkOrderRouting_Location_Location");

                    b.HasIndex("ProductID")
                        .HasDatabaseName("IX_WorkOrderRouting_ProductID");

                    b.HasIndex("WorkOrderID")
                        .HasDatabaseName("FK_WorkOrderRouting_WorkOrder_WorkOrder");

                    b.ToTable("WorkOrderRouting", "Production");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Purchasing.ProductVendor", b =>
                {
                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("VendorID")
                        .HasColumnType("int");

                    b.Property<int>("AverageLeadTime")
                        .HasColumnType("int");

                    b.Property<decimal?>("LastReceiptCost")
                        .HasColumnType("money");

                    b.Property<DateTime?>("LastReceiptDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MaxOrderQty")
                        .HasColumnType("int");

                    b.Property<int>("MinOrderQty")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("OnOrderQty")
                        .HasColumnType("int");

                    b.Property<decimal>("StandardPrice")
                        .HasColumnType("money");

                    b.Property<string>("UnitMeasureCode")
                        .IsRequired()
                        .HasColumnType("nchar(3)");

                    b.HasKey("ProductID", "VendorID");

                    b.HasIndex("ProductID")
                        .HasDatabaseName("FK_ProductVendor_Product_Product");

                    b.HasIndex("UnitMeasureCode")
                        .HasDatabaseName("FK_ProductVendor_UnitMeasure_UnitMeasure");

                    b.HasIndex("VendorID")
                        .HasDatabaseName("FK_ProductVendor_Vendor_Vendor");

                    b.ToTable("ProductVendor", "Purchasing");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Purchasing.PurchaseOrderDetail", b =>
                {
                    b.Property<int>("PurchaseOrderID")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("LineTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("(isnull([OrderQty]*[UnitPrice],(0.00)))", false);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("OrderQty")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<decimal>("ReceivedQty")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("RejectedQty")
                        .HasColumnType("decimal(8,2)");

                    b.Property<decimal>("StockedQty")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("decimal(9,2)")
                        .HasComputedColumnSql("(isnull([ReceivedQty]-[RejectedQty],(0.00)))", false);

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.HasKey("PurchaseOrderID", "PurchaseOrderDetailID");

                    b.HasIndex("ProductID")
                        .HasDatabaseName("FK_PurchaseOrderDetail_Product_Product");

                    b.HasIndex("PurchaseOrderID")
                        .HasDatabaseName("FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderHeader");

                    b.ToTable("PurchaseOrderDetail", "Purchasing");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Purchasing.PurchaseOrderHeader", b =>
                {
                    b.Property<int>("PurchaseOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<decimal>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<byte>("RevisionNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ShipMethodID")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("TaxAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("TotalDue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("(isnull(([SubTotal]+[TaxAmt])+[Freight],(0)))", true);

                    b.Property<int>("VendorID")
                        .HasColumnType("int");

                    b.HasKey("PurchaseOrderID");

                    b.HasIndex("EmployeeID")
                        .HasDatabaseName("FK_PurchaseOrderHeader_Employee_Employee");

                    b.HasIndex("ShipMethodID")
                        .HasDatabaseName("FK_PurchaseOrderHeader_ShipMethod_ShipMethod");

                    b.HasIndex("VendorID")
                        .HasDatabaseName("FK_PurchaseOrderHeader_Vendor_Vendor");

                    b.ToTable("PurchaseOrderHeader", "Purchasing");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Purchasing.ShipMethod", b =>
                {
                    b.Property<int>("ShipMethodID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("ShipBase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("ShipRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.HasKey("ShipMethodID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_ShipMethod_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_ShipMethod_rowguid");

                    b.ToTable("ShipMethod", "Purchasing");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Purchasing.Vendor", b =>
                {
                    b.Property<int>("VendorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("ActiveFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<byte>("CreditRating")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("PreferredVendorStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("PurchasingWebServiceURL")
                        .HasColumnType("nvarchar(1024)");

                    b.HasKey("VendorID");

                    b.HasIndex("AccountNumber")
                        .IsUnique()
                        .HasDatabaseName("AK_Vendor_AccountNumber");

                    b.ToTable("Vendor", "Purchasing");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Purchasing.VendorAddress", b =>
                {
                    b.Property<int>("VendorID")
                        .HasColumnType("int");

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<int>("AddressTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("VendorID", "AddressID");

                    b.HasIndex("AddressID")
                        .HasDatabaseName("FK_VendorAddress_Address_Address");

                    b.HasIndex("AddressTypeID")
                        .HasDatabaseName("FK_VendorAddress_AddressType_AddressType");

                    b.HasIndex("VendorID")
                        .HasDatabaseName("FK_VendorAddress_Vendor_Vendor");

                    b.ToTable("VendorAddress", "Purchasing");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Purchasing.VendorContact", b =>
                {
                    b.Property<int>("VendorID")
                        .HasColumnType("int");

                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<int>("ContactTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("VendorID", "ContactID");

                    b.HasIndex("ContactID")
                        .HasDatabaseName("FK_VendorContact_Contact_Contact");

                    b.HasIndex("ContactTypeID")
                        .HasDatabaseName("FK_VendorContact_ContactType_ContactType");

                    b.HasIndex("VendorID")
                        .HasDatabaseName("FK_VendorContact_Vendor_Vendor");

                    b.ToTable("VendorContact", "Purchasing");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.ContactCreditCard", b =>
                {
                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<int>("CreditCardID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("ContactID", "CreditCardID");

                    b.HasIndex("ContactID")
                        .HasDatabaseName("FK_ContactCreditCard_Contact_Contact");

                    b.HasIndex("CreditCardID")
                        .HasDatabaseName("FK_ContactCreditCard_CreditCard_CreditCard");

                    b.ToTable("ContactCreditCard", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.CountryRegionCurrency", b =>
                {
                    b.Property<string>("CountryRegionCode")
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nchar(3)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CountryRegionCode", "CurrencyCode");

                    b.HasIndex("CountryRegionCode")
                        .HasDatabaseName("FK_CountryRegionCurrency_CountryRegion_CountryRegion");

                    b.HasIndex("CurrencyCode")
                        .HasDatabaseName("FK_CountryRegionCurrency_Currency_Currency");

                    b.ToTable("CountryRegionCurrency", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.CreditCard", b =>
                {
                    b.Property<int>("CreditCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("ExpMonth")
                        .HasColumnType("tinyint");

                    b.Property<short>("ExpYear")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CreditCardID");

                    b.HasIndex("CardNumber")
                        .IsUnique()
                        .HasDatabaseName("AK_CreditCard_CardNumber");

                    b.ToTable("CreditCard", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.Currency", b =>
                {
                    b.Property<string>("CurrencyCode")
                        .HasColumnType("nchar(3)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CurrencyCode");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_Currency_Name");

                    b.ToTable("Currency", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.CurrencyRate", b =>
                {
                    b.Property<int>("CurrencyRateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AverageRate")
                        .HasColumnType("money");

                    b.Property<DateTime>("CurrencyRateDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("EndOfDayRate")
                        .HasColumnType("money");

                    b.Property<string>("FromCurrencyCode")
                        .IsRequired()
                        .HasColumnType("nchar(3)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ToCurrencyCode")
                        .IsRequired()
                        .HasColumnType("nchar(3)");

                    b.HasKey("CurrencyRateID");

                    b.HasIndex("FromCurrencyCode")
                        .HasDatabaseName("FK_CurrencyRate_CurrencyFrom_Currency");

                    b.HasIndex("ToCurrencyCode")
                        .HasDatabaseName("FK_CurrencyRate_CurrencyTo_Currency");

                    b.HasIndex("CurrencyRateDate", "FromCurrencyCode", "ToCurrencyCode")
                        .IsUnique()
                        .HasDatabaseName("AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode");

                    b.ToTable("CurrencyRate", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("varchar(10)")
                        .HasComputedColumnSql("''", false);

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasColumnType("nchar(1)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("SalesTerritoryTerritoryID")
                        .HasColumnType("int");

                    b.Property<int?>("TerritoryID")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.HasIndex("AccountNumber")
                        .IsUnique()
                        .HasDatabaseName("AK_Customer_AccountNumber");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_Customer_rowguid");

                    b.HasIndex("SalesTerritoryTerritoryID");

                    b.HasIndex("TerritoryID")
                        .HasDatabaseName("FK_Customer_SalesTerritory_SalesTerritory");

                    b.ToTable("Customer", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.CustomerAddress", b =>
                {
                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("AddressID")
                        .HasColumnType("int");

                    b.Property<int>("AddressTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("CustomerID", "AddressID");

                    b.HasIndex("AddressID")
                        .HasDatabaseName("FK_CustomerAddress_Address_Address");

                    b.HasIndex("AddressTypeID")
                        .HasDatabaseName("FK_CustomerAddress_AddressType_AddressType");

                    b.HasIndex("CustomerID")
                        .HasDatabaseName("FK_CustomerAddress_Customer_Customer");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_CustomerAddress_rowguid");

                    b.ToTable("CustomerAddress", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.Individual", b =>
                {
                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<string>("Demographics")
                        .HasColumnType("xml");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("CustomerID");

                    b.HasIndex("ContactID")
                        .HasDatabaseName("FK_Individual_Contact_Contact");

                    b.HasIndex("CustomerID")
                        .HasDatabaseName("FK_Individual_Customer_Customer");

                    b.ToTable("Individual", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesOrderDetail", b =>
                {
                    b.Property<int>("SalesOrderID")
                        .HasColumnType("int");

                    b.Property<int>("SalesOrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CarrierTrackingNumber")
                        .HasColumnType("nvarchar(25)");

                    b.Property<decimal>("LineTotal")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("numeric")
                        .HasComputedColumnSql("(isnull(([UnitPrice]*((1.0)-[UnitPriceDiscount]))*[OrderQty],(0.0)))", false);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short>("OrderQty")
                        .HasColumnType("smallint");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("SpecialOfferID")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("money");

                    b.Property<decimal>("UnitPriceDiscount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.0))");

                    b.HasKey("SalesOrderID", "SalesOrderDetailID");

                    b.HasIndex("ProductID")
                        .HasDatabaseName("IX_SalesOrderDetail_ProductID");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_SalesOrderDetail_rowguid");

                    b.HasIndex("SalesOrderID")
                        .HasDatabaseName("FK_SalesOrderDetail_SalesOrderHeader_SalesOrderHeader");

                    b.HasIndex("ProductID", "SpecialOfferID")
                        .HasDatabaseName("FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferProduct");

                    b.ToTable("SalesOrderDetail", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesOrderHeader", b =>
                {
                    b.Property<int>("SalesOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccountNumber")
                        .HasColumnType("nvarchar(15)");

                    b.Property<int>("BillToAddressID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<string>("CreditCardApprovalCode")
                        .HasColumnType("varchar(15)");

                    b.Property<int?>("CreditCardID")
                        .HasColumnType("int");

                    b.Property<int?>("CreditCardID1")
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyRateID")
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyRateID1")
                        .HasColumnType("int");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("Freight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("OnlineOrderFlag")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<DateTime>("OrderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("PurchaseOrderNumber")
                        .HasColumnType("nvarchar(25)");

                    b.Property<byte>("RevisionNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((0))");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("SalesOrderNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("nvarchar(25)")
                        .HasComputedColumnSql("(isnull(N'SO'+CONVERT([nvarchar](23),[SalesOrderID]),N'*** ERROR ***'))", false);

                    b.Property<int?>("SalesPersonID")
                        .HasColumnType("int");

                    b.Property<int?>("SalesPersonID1")
                        .HasColumnType("int");

                    b.Property<int?>("SalesTerritoryTerritoryID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ShipMethodID")
                        .HasColumnType("int");

                    b.Property<int>("ShipToAddressID")
                        .HasColumnType("int");

                    b.Property<byte>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValueSql("((1))");

                    b.Property<decimal>("SubTotal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("TaxAmt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<int?>("TerritoryID")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalDue")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("money")
                        .HasComputedColumnSql("(isnull(([SubTotal]+[TaxAmt])+[Freight],(0)))", false);

                    b.HasKey("SalesOrderID");

                    b.HasIndex("BillToAddressID")
                        .HasDatabaseName("FK_SalesOrderHeader_BillToAddress_Address");

                    b.HasIndex("ContactID")
                        .HasDatabaseName("FK_SalesOrderHeader_Contact_Contact");

                    b.HasIndex("CreditCardID")
                        .HasDatabaseName("FK_SalesOrderHeader_CreditCard_CreditCard");

                    b.HasIndex("CreditCardID1");

                    b.HasIndex("CurrencyRateID")
                        .HasDatabaseName("FK_SalesOrderHeader_CurrencyRate_CurrencyRate");

                    b.HasIndex("CurrencyRateID1");

                    b.HasIndex("CustomerID")
                        .HasDatabaseName("FK_SalesOrderHeader_Customer_Customer");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_SalesOrderHeader_rowguid");

                    b.HasIndex("SalesOrderNumber")
                        .IsUnique()
                        .HasDatabaseName("AK_SalesOrderHeader_SalesOrderNumber");

                    b.HasIndex("SalesPersonID")
                        .HasDatabaseName("FK_SalesOrderHeader_SalesPerson_SalesPerson");

                    b.HasIndex("SalesPersonID1");

                    b.HasIndex("SalesTerritoryTerritoryID");

                    b.HasIndex("ShipMethodID")
                        .HasDatabaseName("FK_SalesOrderHeader_ShipMethod_ShipMethod");

                    b.HasIndex("ShipToAddressID")
                        .HasDatabaseName("FK_SalesOrderHeader_ShipToAddress_Address");

                    b.HasIndex("TerritoryID")
                        .HasDatabaseName("FK_SalesOrderHeader_SalesTerritory_SalesTerritory");

                    b.ToTable("SalesOrderHeader", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesOrderHeaderSalesReason", b =>
                {
                    b.Property<int>("SalesOrderID")
                        .HasColumnType("int");

                    b.Property<int>("SalesReasonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("SalesOrderID", "SalesReasonID");

                    b.HasIndex("SalesOrderID")
                        .HasDatabaseName("FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderHeader");

                    b.HasIndex("SalesReasonID")
                        .HasDatabaseName("FK_SalesOrderHeaderSalesReason_SalesReason_SalesReason");

                    b.ToTable("SalesOrderHeaderSalesReason", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesPerson", b =>
                {
                    b.Property<int>("SalesPersonID")
                        .HasColumnType("int");

                    b.Property<decimal>("Bonus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("CommissionPct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallmoney")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("SalesLastYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal?>("SalesQuota")
                        .HasColumnType("money");

                    b.Property<int?>("SalesTerritoryTerritoryID")
                        .HasColumnType("int");

                    b.Property<decimal>("SalesYTD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<int?>("TerritoryID")
                        .HasColumnType("int");

                    b.HasKey("SalesPersonID");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_SalesPerson_rowguid");

                    b.HasIndex("SalesPersonID")
                        .HasDatabaseName("FK_SalesPerson_Employee_Employee");

                    b.HasIndex("SalesTerritoryTerritoryID");

                    b.HasIndex("TerritoryID")
                        .HasDatabaseName("FK_SalesPerson_SalesTerritory_SalesTerritory");

                    b.ToTable("SalesPerson", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesPersonQuotaHistory", b =>
                {
                    b.Property<int>("SalesPersonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("QuotaDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("SalesQuota")
                        .HasColumnType("money");

                    b.HasKey("SalesPersonID", "QuotaDate");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_SalesPersonQuotaHistory_rowguid");

                    b.HasIndex("SalesPersonID")
                        .HasDatabaseName("FK_SalesPersonQuotaHistory_SalesPerson_SalesPerson");

                    b.ToTable("SalesPersonQuotaHistory", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesReason", b =>
                {
                    b.Property<int>("SalesReasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ReasonType")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SalesReasonID");

                    b.ToTable("SalesReason", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesTaxRate", b =>
                {
                    b.Property<int>("SalesTaxRateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("StateProvinceID")
                        .HasColumnType("int");

                    b.Property<decimal>("TaxRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallmoney")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<byte>("TaxType")
                        .HasColumnType("tinyint");

                    b.HasKey("SalesTaxRateID");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_SalesTaxRate_rowguid");

                    b.HasIndex("StateProvinceID")
                        .HasDatabaseName("FK_SalesTaxRate_StateProvince_StateProvince");

                    b.HasIndex("StateProvinceID", "TaxType")
                        .IsUnique()
                        .HasDatabaseName("AK_SalesTaxRate_StateProvinceID_TaxType");

                    b.ToTable("SalesTaxRate", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesTerritory", b =>
                {
                    b.Property<int>("TerritoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CostLastYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("CostYTD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<string>("CountryRegionCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<decimal>("SalesLastYear")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<decimal>("SalesYTD")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("money")
                        .HasDefaultValueSql("((0.00))");

                    b.HasKey("TerritoryID");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("AK_SalesTerritory_Name");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_SalesTerritory_rowguid");

                    b.ToTable("SalesTerritory", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesTerritoryHistory", b =>
                {
                    b.Property<int>("SalesPersonID")
                        .HasColumnType("int");

                    b.Property<int>("TerritoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("SalesPersonID", "TerritoryID", "StartDate");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_SalesTerritoryHistory_rowguid");

                    b.HasIndex("SalesPersonID")
                        .HasDatabaseName("FK_SalesTerritoryHistory_SalesPerson_SalesPerson");

                    b.HasIndex("TerritoryID")
                        .HasDatabaseName("FK_SalesTerritoryHistory_SalesTerritory_SalesTerritory");

                    b.ToTable("SalesTerritoryHistory", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ShoppingCartID")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ShoppingCartItemID");

                    b.HasIndex("ProductID")
                        .HasDatabaseName("FK_ShoppingCartItem_Product_Product");

                    b.HasIndex("ProductID", "ShoppingCartID")
                        .HasDatabaseName("IX_ShoppingCartItem_ShoppingCartID_ProductID");

                    b.ToTable("ShoppingCartItem", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SpecialOffer", b =>
                {
                    b.Property<int>("SpecialOfferID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountPct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallmoney")
                        .HasDefaultValueSql("((0.00))");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MaxQty")
                        .HasColumnType("int");

                    b.Property<int>("MinQty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((0))");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SpecialOfferID");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_SpecialOffer_rowguid");

                    b.ToTable("SpecialOffer", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SpecialOfferProduct", b =>
                {
                    b.Property<int>("SpecialOfferID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("SpecialOfferID", "ProductID");

                    b.HasIndex("ProductID")
                        .HasDatabaseName("FK_SpecialOfferProduct_Product_Product");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_SpecialOfferProduct_rowguid");

                    b.HasIndex("SpecialOfferID")
                        .HasDatabaseName("FK_SpecialOfferProduct_SpecialOffer_SpecialOffer");

                    b.ToTable("SpecialOfferProduct", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.Store", b =>
                {
                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<string>("Demographics")
                        .HasColumnType("xml");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int?>("SalesPersonID")
                        .HasColumnType("int");

                    b.Property<int?>("SalesPersonID1")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.HasIndex("CustomerID")
                        .HasDatabaseName("FK_Store_Customer_Customer");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_Store_rowguid");

                    b.HasIndex("SalesPersonID")
                        .HasDatabaseName("FK_Store_SalesPerson_SalesPerson");

                    b.HasIndex("SalesPersonID1");

                    b.ToTable("Store", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.StoreContact", b =>
                {
                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("ContactID")
                        .HasColumnType("int");

                    b.Property<int>("ContactTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("Rowguid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rowguid")
                        .HasDefaultValueSql("(newid())");

                    b.HasKey("CustomerID", "ContactID");

                    b.HasIndex("ContactID")
                        .HasDatabaseName("FK_StoreContact_Contact_Contact");

                    b.HasIndex("ContactTypeID")
                        .HasDatabaseName("FK_StoreContact_ContactType_ContactType");

                    b.HasIndex("CustomerID")
                        .HasDatabaseName("FK_StoreContact_Store_Store");

                    b.HasIndex("Rowguid")
                        .IsUnique()
                        .HasDatabaseName("AK_StoreContact_rowguid");

                    b.ToTable("StoreContact", "Sales");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.HumanResources.Employee", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Person.Contact", "Contact")
                        .WithMany("Employees")
                        .HasForeignKey("ContactID")
                        .HasConstraintName("FK_Employee_Contact_Contact_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.HumanResources.Employee", null)
                        .WithMany("Managers")
                        .HasForeignKey("EmployeeID1");

                    b.HasOne("AdventureWorks.Domain.Entities.HumanResources.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerID")
                        .HasConstraintName("FK_Employee_Employee_Manager_Constraint")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Contact");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.HumanResources.EmployeeAddress", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Person.Address", "Address")
                        .WithMany("EmployeeAddresses")
                        .HasForeignKey("AddressID")
                        .HasConstraintName("FK_EmployeeAddress_Address_Address_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.HumanResources.Employee", "Employee")
                        .WithMany("EmployeeAddresses")
                        .HasForeignKey("EmployeeID")
                        .HasConstraintName("FK_EmployeeAddress_Employee_Employee_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.HumanResources.EmployeeDepartmentHistory", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.HumanResources.Department", "Department")
                        .WithMany("EmployeeDepartmentHistories")
                        .HasForeignKey("DepartmentID")
                        .HasConstraintName("FK_EmployeeDepartmentHistory_Department_Department_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.HumanResources.Employee", "Employee")
                        .WithMany("EmployeeDepartmentHistories")
                        .HasForeignKey("EmployeeID")
                        .HasConstraintName("FK_EmployeeDepartmentHistory_Employee_Employee_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.HumanResources.Shift", "Shift")
                        .WithMany("EmployeeDepartmentHistories")
                        .HasForeignKey("ShiftID")
                        .HasConstraintName("FK_EmployeeDepartmentHistory_Shift_Shift_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Employee");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.HumanResources.EmployeePayHistory", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.HumanResources.Employee", "Employee")
                        .WithMany("EmployeePayHistories")
                        .HasForeignKey("EmployeeID")
                        .HasConstraintName("FK_EmployeePayHistory_Employee_Employee_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.HumanResources.JobCandidate", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.HumanResources.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .HasConstraintName("FK_JobCandidate_Employee_Employee_Constraint")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AdventureWorks.Domain.Entities.HumanResources.Employee", null)
                        .WithMany("JobCandidates")
                        .HasForeignKey("EmployeeID1");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Person.Address", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Person.StateProvince", "StateProvince")
                        .WithMany("Addresses")
                        .HasForeignKey("StateProvinceID")
                        .HasConstraintName("FK_Address_StateProvince_StateProvince_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StateProvince");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Person.StateProvince", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Person.CountryRegion", "CountryRegion")
                        .WithMany("StateProvinces")
                        .HasForeignKey("CountryRegionCode")
                        .HasConstraintName("FK_StateProvince_CountryRegion_CountryRegion_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.SalesTerritory", "SalesTerritory")
                        .WithMany("StateProvinces")
                        .HasForeignKey("TerritoryID")
                        .HasConstraintName("FK_StateProvince_SalesTerritory_SalesTerritory_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CountryRegion");

                    b.Navigation("SalesTerritory");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.BillOfMaterials", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Production.Product", "ComponentProduct")
                        .WithMany("BillOfMaterialsForComponents")
                        .HasForeignKey("ComponentID")
                        .HasConstraintName("FK_BillOfMaterials_Product_ComponentProduct_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Production.Product", "AssemblyProduct")
                        .WithMany()
                        .HasForeignKey("ProductAssemblyID")
                        .HasConstraintName("FK_BillOfMaterials_Product_AssemblyProduct_Constraint")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AdventureWorks.Domain.Entities.Production.Product", null)
                        .WithMany("BillOfMaterialsForAssemblies")
                        .HasForeignKey("ProductID");

                    b.HasOne("AdventureWorks.Domain.Entities.Production.UnitMeasure", "UnitMeasure")
                        .WithMany("BillOfMaterials")
                        .HasForeignKey("UnitMeasureCode")
                        .HasConstraintName("FK_BillOfMaterials_UnitMeasure_UnitMeasure_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AssemblyProduct");

                    b.Navigation("ComponentProduct");

                    b.Navigation("UnitMeasure");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.Product", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Production.ProductModel", "ProductModel")
                        .WithMany()
                        .HasForeignKey("ProductModelID")
                        .HasConstraintName("FK_Product_ProductModel_ProductModel_Constraint")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AdventureWorks.Domain.Entities.Production.ProductModel", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductModelID1");

                    b.HasOne("AdventureWorks.Domain.Entities.Production.ProductSubcategory", "ProductSubcategory")
                        .WithMany()
                        .HasForeignKey("ProductSubcategoryID")
                        .HasConstraintName("FK_Product_ProductSubcategory_ProductSubcategory_Constraint")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AdventureWorks.Domain.Entities.Production.ProductSubcategory", null)
                        .WithMany("Products")
                        .HasForeignKey("ProductSubcategoryID1");

                    b.HasOne("AdventureWorks.Domain.Entities.Production.UnitMeasure", "UnitMeasureSize")
                        .WithMany()
                        .HasForeignKey("SizeUnitMeasureCode")
                        .HasConstraintName("FK_Product_UnitMeasure_UnitMeasureSize_Constraint")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AdventureWorks.Domain.Entities.Production.UnitMeasure", null)
                        .WithMany("ProductWeights")
                        .HasForeignKey("UnitMeasureCode");

                    b.HasOne("AdventureWorks.Domain.Entities.Production.UnitMeasure", null)
                        .WithMany("SizesProducts")
                        .HasForeignKey("UnitMeasureCode1");

                    b.HasOne("AdventureWorks.Domain.Entities.Production.UnitMeasure", "UnitMeasureWeight")
                        .WithMany()
                        .HasForeignKey("WeightUnitMeasureCode")
                        .HasConstraintName("FK_Product_UnitMeasure_UnitMeasureWeight_Constraint")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("ProductModel");

                    b.Navigation("ProductSubcategory");

                    b.Navigation("UnitMeasureSize");

                    b.Navigation("UnitMeasureWeight");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductCostHistory", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Production.Product", "Product")
                        .WithMany("ProductCostHistories")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_ProductCostHistory_Product_Product_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductDocument", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Production.Document", "Document")
                        .WithMany("ProductDocuments")
                        .HasForeignKey("DocumentID")
                        .HasConstraintName("FK_ProductDocument_Document_Document_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Production.Product", "Product")
                        .WithMany("ProductDocuments")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_ProductDocument_Product_Product_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductInventory", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Production.Location", "Location")
                        .WithMany("ProductInventories")
                        .HasForeignKey("LocationID")
                        .HasConstraintName("FK_ProductInventory_Location_Location_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Production.Product", "Product")
                        .WithMany("ProductInventories")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_ProductInventory_Product_Product_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductListPriceHistory", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Production.Product", "Product")
                        .WithMany("ProductListPriceHistories")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_ProductListPriceHistory_Product_Product_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductModelIllustration", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Production.Illustration", "Illustration")
                        .WithMany("ProductModelIllustrations")
                        .HasForeignKey("IllustrationID")
                        .HasConstraintName("FK_ProductModelIllustration_Illustration_Illustration_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Production.ProductModel", "ProductModel")
                        .WithMany("ProductModelIllustrations")
                        .HasForeignKey("ProductModelID")
                        .HasConstraintName("FK_ProductModelIllustration_ProductModel_ProductModel_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Illustration");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductModelProductDescriptionCulture", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Production.Culture", "Culture")
                        .WithMany("ProductModelProductDescriptionCultures")
                        .HasForeignKey("CultureID")
                        .HasConstraintName("FK_ProductModelProductDescriptionCulture_Culture_Culture_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Production.ProductDescription", "ProductDescription")
                        .WithMany("ProductModelProductDescriptionCultures")
                        .HasForeignKey("ProductDescriptionID")
                        .HasConstraintName("FK_ProductModelProductDescriptionCulture_ProductDescription_ProductDescription_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Production.ProductModel", "ProductModel")
                        .WithMany("ProductModelProductDescriptionCultures")
                        .HasForeignKey("ProductModelID")
                        .HasConstraintName("FK_ProductModelProductDescriptionCulture_ProductModel_ProductModel_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Culture");

                    b.Navigation("ProductDescription");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductProductPhoto", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Production.Product", "Product")
                        .WithMany("ProductProductPhotos")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_ProductProductPhoto_Product_Product_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Production.ProductPhoto", "ProductPhoto")
                        .WithMany("ProductProductPhotos")
                        .HasForeignKey("ProductPhotoID")
                        .HasConstraintName("FK_ProductProductPhoto_ProductPhoto_ProductPhoto_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductPhoto");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductReview", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Production.Product", "Product")
                        .WithMany("ProductReviews")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_ProductReview_Product_Product_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductSubcategory", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Production.ProductCategory", "ProductCategory")
                        .WithMany("ProductSubcategories")
                        .HasForeignKey("ProductCategoryID")
                        .HasConstraintName("FK_ProductSubcategory_ProductCategory_ProductCategory_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ProductCategory");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.TransactionHistory", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Production.Product", "Product")
                        .WithMany("TransactionHistories")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_TransactionHistory_Product_Product_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.WorkOrder", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Production.Product", "Product")
                        .WithMany("WorkOrders")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_WorkOrder_Product_Product_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Production.ScrapReason", "ScrapReason")
                        .WithMany()
                        .HasForeignKey("ScrapReasonID")
                        .HasConstraintName("FK_WorkOrder_ScrapReason_ScrapReason_Constraint")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AdventureWorks.Domain.Entities.Production.ScrapReason", null)
                        .WithMany("WorkOrders")
                        .HasForeignKey("ScrapReasonID1");

                    b.Navigation("Product");

                    b.Navigation("ScrapReason");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.WorkOrderRouting", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Production.Location", "Location")
                        .WithMany("WorkOrderRoutings")
                        .HasForeignKey("LocationID")
                        .HasConstraintName("FK_WorkOrderRouting_Location_Location_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Production.WorkOrder", "WorkOrder")
                        .WithMany("WorkOrderRoutings")
                        .HasForeignKey("WorkOrderID")
                        .HasConstraintName("FK_WorkOrderRouting_WorkOrder_WorkOrder_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("WorkOrder");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Purchasing.ProductVendor", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Production.Product", "Product")
                        .WithMany("ProductVendors")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_ProductVendor_Product_Product_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Production.UnitMeasure", "UnitMeasure")
                        .WithMany("ProductVendors")
                        .HasForeignKey("UnitMeasureCode")
                        .HasConstraintName("FK_ProductVendor_UnitMeasure_UnitMeasure_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Purchasing.Vendor", "Vendor")
                        .WithMany("ProductVendors")
                        .HasForeignKey("VendorID")
                        .HasConstraintName("FK_ProductVendor_Vendor_Vendor_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("UnitMeasure");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Purchasing.PurchaseOrderDetail", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Production.Product", "Product")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_PurchaseOrderDetail_Product_Product_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Purchasing.PurchaseOrderHeader", "PurchaseOrderHeader")
                        .WithMany("PurchaseOrderDetails")
                        .HasForeignKey("PurchaseOrderID")
                        .HasConstraintName("FK_PurchaseOrderDetail_PurchaseOrderHeader_PurchaseOrderHeader_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrderHeader");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Purchasing.PurchaseOrderHeader", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.HumanResources.Employee", "Employee")
                        .WithMany("PurchaseOrderHeaders")
                        .HasForeignKey("EmployeeID")
                        .HasConstraintName("FK_PurchaseOrderHeader_Employee_Employee_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Purchasing.ShipMethod", "ShipMethod")
                        .WithMany("PurchaseOrderHeaders")
                        .HasForeignKey("ShipMethodID")
                        .HasConstraintName("FK_PurchaseOrderHeader_ShipMethod_ShipMethod_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Purchasing.Vendor", "Vendor")
                        .WithMany("PurchaseOrderHeaders")
                        .HasForeignKey("VendorID")
                        .HasConstraintName("FK_PurchaseOrderHeader_Vendor_Vendor_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ShipMethod");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Purchasing.VendorAddress", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Person.Address", "Address")
                        .WithMany("VendorAddresses")
                        .HasForeignKey("AddressID")
                        .HasConstraintName("FK_VendorAddress_Address_Address_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Person.AddressType", "AddressType")
                        .WithMany("VendorAddresses")
                        .HasForeignKey("AddressTypeID")
                        .HasConstraintName("FK_VendorAddress_AddressType_AddressType_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Purchasing.Vendor", "Vendor")
                        .WithMany("VendorAddresses")
                        .HasForeignKey("VendorID")
                        .HasConstraintName("FK_VendorAddress_Vendor_Vendor_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("AddressType");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Purchasing.VendorContact", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Person.Contact", "Contact")
                        .WithMany("VendorContacts")
                        .HasForeignKey("ContactID")
                        .HasConstraintName("FK_VendorContact_Contact_Contact_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Person.ContactType", "ContactType")
                        .WithMany("VendorContacts")
                        .HasForeignKey("ContactTypeID")
                        .HasConstraintName("FK_VendorContact_ContactType_ContactType_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Purchasing.Vendor", "Vendor")
                        .WithMany("VendorContacts")
                        .HasForeignKey("VendorID")
                        .HasConstraintName("FK_VendorContact_Vendor_Vendor_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("ContactType");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.ContactCreditCard", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Person.Contact", "Contact")
                        .WithMany("ContactCreditCards")
                        .HasForeignKey("ContactID")
                        .HasConstraintName("FK_ContactCreditCard_Contact_Contact_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.CreditCard", "CreditCard")
                        .WithMany("ContactCreditCards")
                        .HasForeignKey("CreditCardID")
                        .HasConstraintName("FK_ContactCreditCard_CreditCard_CreditCard_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("CreditCard");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.CountryRegionCurrency", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Person.CountryRegion", "CountryRegion")
                        .WithMany("CountryRegionCurrencies")
                        .HasForeignKey("CountryRegionCode")
                        .HasConstraintName("FK_CountryRegionCurrency_CountryRegion_CountryRegion_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.Currency", "Currency")
                        .WithMany("CountryRegionCurrencies")
                        .HasForeignKey("CurrencyCode")
                        .HasConstraintName("FK_CountryRegionCurrency_Currency_Currency_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CountryRegion");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.CurrencyRate", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Sales.Currency", "CurrencyFrom")
                        .WithMany("CurrencyRatesFrom")
                        .HasForeignKey("FromCurrencyCode")
                        .HasConstraintName("FK_CurrencyRate_Currency_CurrencyFrom_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.Currency", "CurrencyTo")
                        .WithMany("CurrencyRatesTo")
                        .HasForeignKey("ToCurrencyCode")
                        .HasConstraintName("FK_CurrencyRate_Currency_CurrencyTo_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CurrencyFrom");

                    b.Navigation("CurrencyTo");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.Customer", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Sales.SalesTerritory", null)
                        .WithMany("Customers")
                        .HasForeignKey("SalesTerritoryTerritoryID");

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.SalesTerritory", "SalesTerritory")
                        .WithMany()
                        .HasForeignKey("TerritoryID")
                        .HasConstraintName("FK_Customer_SalesTerritory_SalesTerritory_Constraint")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("SalesTerritory");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.CustomerAddress", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Person.Address", "Address")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("AddressID")
                        .HasConstraintName("FK_CustomerAddress_Address_Address_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Person.AddressType", "AddressType")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("AddressTypeID")
                        .HasConstraintName("FK_CustomerAddress_AddressType_AddressType_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.Customer", "Customer")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustomerID")
                        .HasConstraintName("FK_CustomerAddress_Customer_Customer_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("AddressType");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.Individual", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Person.Contact", "Contact")
                        .WithMany("Individuals")
                        .HasForeignKey("ContactID")
                        .HasConstraintName("FK_Individual_Contact_Contact_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.Customer", "Customer")
                        .WithMany("Individuals")
                        .HasForeignKey("CustomerID")
                        .HasConstraintName("FK_Individual_Customer_Customer_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesOrderDetail", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Sales.SalesOrderHeader", "SalesOrderHeader")
                        .WithMany("SalesOrderDetails")
                        .HasForeignKey("SalesOrderID")
                        .HasConstraintName("FK_SalesOrderDetail_SalesOrderHeader_SalesOrderHeader_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.SpecialOfferProduct", "SpecialOfferProduct")
                        .WithMany("SalesOrderSpecialProductDetails")
                        .HasForeignKey("ProductID", "SpecialOfferID")
                        .HasConstraintName("FK_SalesOrderDetail_SpecialOfferProduct_SpecialOfferProduct_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SalesOrderHeader");

                    b.Navigation("SpecialOfferProduct");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesOrderHeader", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Person.Address", "BillToAddress")
                        .WithMany("SalesOrderBillToHeaders")
                        .HasForeignKey("BillToAddressID")
                        .HasConstraintName("FK_SalesOrderHeader_Address_BillToAddress_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Person.Contact", "Contact")
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("ContactID")
                        .HasConstraintName("FK_SalesOrderHeader_Contact_Contact_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.CreditCard", "CreditCard")
                        .WithMany()
                        .HasForeignKey("CreditCardID")
                        .HasConstraintName("FK_SalesOrderHeader_CreditCard_CreditCard_Constraint")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.CreditCard", null)
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("CreditCardID1");

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.CurrencyRate", "CurrencyRate")
                        .WithMany()
                        .HasForeignKey("CurrencyRateID")
                        .HasConstraintName("FK_SalesOrderHeader_CurrencyRate_CurrencyRate_Constraint")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.CurrencyRate", null)
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("CurrencyRateID1");

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.Customer", "Customer")
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("CustomerID")
                        .HasConstraintName("FK_SalesOrderHeader_Customer_Customer_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.SalesPerson", "SalesPerson")
                        .WithMany()
                        .HasForeignKey("SalesPersonID")
                        .HasConstraintName("FK_SalesOrderHeader_SalesPerson_SalesPerson_Constraint")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.SalesPerson", null)
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("SalesPersonID1");

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.SalesTerritory", null)
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("SalesTerritoryTerritoryID");

                    b.HasOne("AdventureWorks.Domain.Entities.Purchasing.ShipMethod", "ShipMethod")
                        .WithMany("SalesOrderHeaders")
                        .HasForeignKey("ShipMethodID")
                        .HasConstraintName("FK_SalesOrderHeader_ShipMethod_ShipMethod_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Person.Address", "ShipToAddress")
                        .WithMany("SalesOrderShipToHeaders")
                        .HasForeignKey("ShipToAddressID")
                        .HasConstraintName("FK_SalesOrderHeader_Address_ShipToAddress_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.SalesTerritory", "SalesTerritory")
                        .WithMany()
                        .HasForeignKey("TerritoryID")
                        .HasConstraintName("FK_SalesOrderHeader_SalesTerritory_SalesTerritory_Constraint")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("BillToAddress");

                    b.Navigation("Contact");

                    b.Navigation("CreditCard");

                    b.Navigation("CurrencyRate");

                    b.Navigation("Customer");

                    b.Navigation("SalesPerson");

                    b.Navigation("SalesTerritory");

                    b.Navigation("ShipMethod");

                    b.Navigation("ShipToAddress");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesOrderHeaderSalesReason", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Sales.SalesOrderHeader", "SalesOrderHeader")
                        .WithMany("SalesOrderHeaderSalesReasons")
                        .HasForeignKey("SalesOrderID")
                        .HasConstraintName("FK_SalesOrderHeaderSalesReason_SalesOrderHeader_SalesOrderHeader_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.SalesReason", "SalesReason")
                        .WithMany("SalesOrderHeaderSalesReasons")
                        .HasForeignKey("SalesReasonID")
                        .HasConstraintName("FK_SalesOrderHeaderSalesReason_SalesReason_SalesReason_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SalesOrderHeader");

                    b.Navigation("SalesReason");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesPerson", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.HumanResources.Employee", "Employee")
                        .WithMany("SalesPeople")
                        .HasForeignKey("SalesPersonID")
                        .HasConstraintName("FK_SalesPerson_Employee_Employee_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.SalesTerritory", null)
                        .WithMany("SalesPeople")
                        .HasForeignKey("SalesTerritoryTerritoryID");

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.SalesTerritory", "SalesTerritory")
                        .WithMany()
                        .HasForeignKey("TerritoryID")
                        .HasConstraintName("FK_SalesPerson_SalesTerritory_SalesTerritory_Constraint")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Employee");

                    b.Navigation("SalesTerritory");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesPersonQuotaHistory", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Sales.SalesPerson", "SalesPerson")
                        .WithMany("SalesPersonQuotaHistories")
                        .HasForeignKey("SalesPersonID")
                        .HasConstraintName("FK_SalesPersonQuotaHistory_SalesPerson_SalesPerson_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesTaxRate", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Person.StateProvince", "StateProvince")
                        .WithMany("SalesTaxRates")
                        .HasForeignKey("StateProvinceID")
                        .HasConstraintName("FK_SalesTaxRate_StateProvince_StateProvince_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("StateProvince");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesTerritoryHistory", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Sales.SalesPerson", "SalesPerson")
                        .WithMany("SalesTerritoryHistories")
                        .HasForeignKey("SalesPersonID")
                        .HasConstraintName("FK_SalesTerritoryHistory_SalesPerson_SalesPerson_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.SalesTerritory", "SalesTerritory")
                        .WithMany("SalesTerritoryHistories")
                        .HasForeignKey("TerritoryID")
                        .HasConstraintName("FK_SalesTerritoryHistory_SalesTerritory_SalesTerritory_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SalesPerson");

                    b.Navigation("SalesTerritory");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.ShoppingCartItem", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Production.Product", "Product")
                        .WithMany("ShoppingCartItems")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_ShoppingCartItem_Product_Product_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SpecialOfferProduct", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Production.Product", "Product")
                        .WithMany("SpecialOfferProducts")
                        .HasForeignKey("ProductID")
                        .HasConstraintName("FK_SpecialOfferProduct_Product_Product_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.SpecialOffer", "SpecialOffer")
                        .WithMany("SpecialOfferProducts")
                        .HasForeignKey("SpecialOfferID")
                        .HasConstraintName("FK_SpecialOfferProduct_SpecialOffer_SpecialOffer_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SpecialOffer");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.Store", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Sales.Customer", "Customer")
                        .WithMany("Stores")
                        .HasForeignKey("CustomerID")
                        .HasConstraintName("FK_Store_Customer_Customer_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.SalesPerson", "SalesPerson")
                        .WithMany()
                        .HasForeignKey("SalesPersonID")
                        .HasConstraintName("FK_Store_SalesPerson_SalesPerson_Constraint")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.SalesPerson", null)
                        .WithMany("Stores")
                        .HasForeignKey("SalesPersonID1");

                    b.Navigation("Customer");

                    b.Navigation("SalesPerson");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.StoreContact", b =>
                {
                    b.HasOne("AdventureWorks.Domain.Entities.Person.Contact", "Contact")
                        .WithMany("StoreContacts")
                        .HasForeignKey("ContactID")
                        .HasConstraintName("FK_StoreContact_Contact_Contact_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Person.ContactType", "ContactType")
                        .WithMany("StoreContacts")
                        .HasForeignKey("ContactTypeID")
                        .HasConstraintName("FK_StoreContact_ContactType_ContactType_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AdventureWorks.Domain.Entities.Sales.Store", "Store")
                        .WithMany("StoreContacts")
                        .HasForeignKey("CustomerID")
                        .HasConstraintName("FK_StoreContact_Store_Store_Constraint")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("ContactType");

                    b.Navigation("Store");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.HumanResources.Department", b =>
                {
                    b.Navigation("EmployeeDepartmentHistories");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.HumanResources.Employee", b =>
                {
                    b.Navigation("EmployeeAddresses");

                    b.Navigation("EmployeeDepartmentHistories");

                    b.Navigation("EmployeePayHistories");

                    b.Navigation("JobCandidates");

                    b.Navigation("Managers");

                    b.Navigation("PurchaseOrderHeaders");

                    b.Navigation("SalesPeople");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.HumanResources.Shift", b =>
                {
                    b.Navigation("EmployeeDepartmentHistories");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Person.Address", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("EmployeeAddresses");

                    b.Navigation("SalesOrderBillToHeaders");

                    b.Navigation("SalesOrderShipToHeaders");

                    b.Navigation("VendorAddresses");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Person.AddressType", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("VendorAddresses");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Person.Contact", b =>
                {
                    b.Navigation("ContactCreditCards");

                    b.Navigation("Employees");

                    b.Navigation("Individuals");

                    b.Navigation("SalesOrderHeaders");

                    b.Navigation("StoreContacts");

                    b.Navigation("VendorContacts");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Person.ContactType", b =>
                {
                    b.Navigation("StoreContacts");

                    b.Navigation("VendorContacts");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Person.CountryRegion", b =>
                {
                    b.Navigation("CountryRegionCurrencies");

                    b.Navigation("StateProvinces");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Person.StateProvince", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("SalesTaxRates");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.Culture", b =>
                {
                    b.Navigation("ProductModelProductDescriptionCultures");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.Document", b =>
                {
                    b.Navigation("ProductDocuments");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.Illustration", b =>
                {
                    b.Navigation("ProductModelIllustrations");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.Location", b =>
                {
                    b.Navigation("ProductInventories");

                    b.Navigation("WorkOrderRoutings");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.Product", b =>
                {
                    b.Navigation("BillOfMaterialsForAssemblies");

                    b.Navigation("BillOfMaterialsForComponents");

                    b.Navigation("ProductCostHistories");

                    b.Navigation("ProductDocuments");

                    b.Navigation("ProductInventories");

                    b.Navigation("ProductListPriceHistories");

                    b.Navigation("ProductProductPhotos");

                    b.Navigation("ProductReviews");

                    b.Navigation("ProductVendors");

                    b.Navigation("PurchaseOrderDetails");

                    b.Navigation("ShoppingCartItems");

                    b.Navigation("SpecialOfferProducts");

                    b.Navigation("TransactionHistories");

                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductCategory", b =>
                {
                    b.Navigation("ProductSubcategories");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductDescription", b =>
                {
                    b.Navigation("ProductModelProductDescriptionCultures");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductModel", b =>
                {
                    b.Navigation("ProductModelIllustrations");

                    b.Navigation("ProductModelProductDescriptionCultures");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductPhoto", b =>
                {
                    b.Navigation("ProductProductPhotos");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ProductSubcategory", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.ScrapReason", b =>
                {
                    b.Navigation("WorkOrders");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.UnitMeasure", b =>
                {
                    b.Navigation("BillOfMaterials");

                    b.Navigation("ProductVendors");

                    b.Navigation("ProductWeights");

                    b.Navigation("SizesProducts");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Production.WorkOrder", b =>
                {
                    b.Navigation("WorkOrderRoutings");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Purchasing.PurchaseOrderHeader", b =>
                {
                    b.Navigation("PurchaseOrderDetails");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Purchasing.ShipMethod", b =>
                {
                    b.Navigation("PurchaseOrderHeaders");

                    b.Navigation("SalesOrderHeaders");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Purchasing.Vendor", b =>
                {
                    b.Navigation("ProductVendors");

                    b.Navigation("PurchaseOrderHeaders");

                    b.Navigation("VendorAddresses");

                    b.Navigation("VendorContacts");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.CreditCard", b =>
                {
                    b.Navigation("ContactCreditCards");

                    b.Navigation("SalesOrderHeaders");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.Currency", b =>
                {
                    b.Navigation("CountryRegionCurrencies");

                    b.Navigation("CurrencyRatesFrom");

                    b.Navigation("CurrencyRatesTo");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.CurrencyRate", b =>
                {
                    b.Navigation("SalesOrderHeaders");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("Individuals");

                    b.Navigation("SalesOrderHeaders");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesOrderHeader", b =>
                {
                    b.Navigation("SalesOrderDetails");

                    b.Navigation("SalesOrderHeaderSalesReasons");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesPerson", b =>
                {
                    b.Navigation("SalesOrderHeaders");

                    b.Navigation("SalesPersonQuotaHistories");

                    b.Navigation("SalesTerritoryHistories");

                    b.Navigation("Stores");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesReason", b =>
                {
                    b.Navigation("SalesOrderHeaderSalesReasons");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SalesTerritory", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("SalesOrderHeaders");

                    b.Navigation("SalesPeople");

                    b.Navigation("SalesTerritoryHistories");

                    b.Navigation("StateProvinces");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SpecialOffer", b =>
                {
                    b.Navigation("SpecialOfferProducts");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.SpecialOfferProduct", b =>
                {
                    b.Navigation("SalesOrderSpecialProductDetails");
                });

            modelBuilder.Entity("AdventureWorks.Domain.Entities.Sales.Store", b =>
                {
                    b.Navigation("StoreContacts");
                });
#pragma warning restore 612, 618
        }
    }
}
